
pdb-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004784  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800495c  0800495c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004964  08004964  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800496c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08004978  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004978  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf53  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e35  00000000  00000000  0002cfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  0002ee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2f  00000000  00000000  0002fb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232a8  00000000  00000000  0003055f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f628  00000000  00000000  00053807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfd97  00000000  00000000  00062e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038e4  00000000  00000000  00142bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001464ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004934 	.word	0x08004934

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004934 	.word	0x08004934

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b970 	b.w	8000d3c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9e08      	ldr	r6, [sp, #32]
 8000a7a:	460d      	mov	r5, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	460f      	mov	r7, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4694      	mov	ip, r2
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0xe2>
 8000a8a:	fab2 f382 	clz	r3, r2
 8000a8e:	b143      	cbz	r3, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a94:	f1c3 0220 	rsb	r2, r3, #32
 8000a98:	409f      	lsls	r7, r3
 8000a9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a9e:	4317      	orrs	r7, r2
 8000aa0:	409c      	lsls	r4, r3
 8000aa2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aa6:	fa1f f58c 	uxth.w	r5, ip
 8000aaa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000aae:	0c22      	lsrs	r2, r4, #16
 8000ab0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ab4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ab8:	fb01 f005 	mul.w	r0, r1, r5
 8000abc:	4290      	cmp	r0, r2
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ac8:	f080 811c 	bcs.w	8000d04 <__udivmoddi4+0x290>
 8000acc:	4290      	cmp	r0, r2
 8000ace:	f240 8119 	bls.w	8000d04 <__udivmoddi4+0x290>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	4462      	add	r2, ip
 8000ad6:	1a12      	subs	r2, r2, r0
 8000ad8:	b2a4      	uxth	r4, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ae6:	fb00 f505 	mul.w	r5, r0, r5
 8000aea:	42a5      	cmp	r5, r4
 8000aec:	d90a      	bls.n	8000b04 <__udivmoddi4+0x90>
 8000aee:	eb1c 0404 	adds.w	r4, ip, r4
 8000af2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af6:	f080 8107 	bcs.w	8000d08 <__udivmoddi4+0x294>
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	f240 8104 	bls.w	8000d08 <__udivmoddi4+0x294>
 8000b00:	4464      	add	r4, ip
 8000b02:	3802      	subs	r0, #2
 8000b04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b08:	1b64      	subs	r4, r4, r5
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11e      	cbz	r6, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40dc      	lsrs	r4, r3
 8000b10:	2300      	movs	r3, #0
 8000b12:	e9c6 4300 	strd	r4, r3, [r6]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0xbc>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	f000 80ed 	beq.w	8000cfe <__udivmoddi4+0x28a>
 8000b24:	2100      	movs	r1, #0
 8000b26:	e9c6 0500 	strd	r0, r5, [r6]
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b30:	fab3 f183 	clz	r1, r3
 8000b34:	2900      	cmp	r1, #0
 8000b36:	d149      	bne.n	8000bcc <__udivmoddi4+0x158>
 8000b38:	42ab      	cmp	r3, r5
 8000b3a:	d302      	bcc.n	8000b42 <__udivmoddi4+0xce>
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	f200 80f8 	bhi.w	8000d32 <__udivmoddi4+0x2be>
 8000b42:	1a84      	subs	r4, r0, r2
 8000b44:	eb65 0203 	sbc.w	r2, r5, r3
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4617      	mov	r7, r2
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d0e2      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	e9c6 4700 	strd	r4, r7, [r6]
 8000b54:	e7df      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b56:	b902      	cbnz	r2, 8000b5a <__udivmoddi4+0xe6>
 8000b58:	deff      	udf	#255	; 0xff
 8000b5a:	fab2 f382 	clz	r3, r2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f040 8090 	bne.w	8000c84 <__udivmoddi4+0x210>
 8000b64:	1a8a      	subs	r2, r1, r2
 8000b66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6a:	fa1f fe8c 	uxth.w	lr, ip
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b74:	fb07 2015 	mls	r0, r7, r5, r2
 8000b78:	0c22      	lsrs	r2, r4, #16
 8000b7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b7e:	fb0e f005 	mul.w	r0, lr, r5
 8000b82:	4290      	cmp	r0, r2
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x124>
 8000b86:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x122>
 8000b90:	4290      	cmp	r0, r2
 8000b92:	f200 80cb 	bhi.w	8000d2c <__udivmoddi4+0x2b8>
 8000b96:	4645      	mov	r5, r8
 8000b98:	1a12      	subs	r2, r2, r0
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ba4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x14e>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb8:	d202      	bcs.n	8000bc0 <__udivmoddi4+0x14c>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f200 80bb 	bhi.w	8000d36 <__udivmoddi4+0x2c2>
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	eba4 040e 	sub.w	r4, r4, lr
 8000bc6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bca:	e79f      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bcc:	f1c1 0720 	rsb	r7, r1, #32
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bda:	fa05 f401 	lsl.w	r4, r5, r1
 8000bde:	fa20 f307 	lsr.w	r3, r0, r7
 8000be2:	40fd      	lsrs	r5, r7
 8000be4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000be8:	4323      	orrs	r3, r4
 8000bea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bee:	fa1f fe8c 	uxth.w	lr, ip
 8000bf2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bf6:	0c1c      	lsrs	r4, r3, #16
 8000bf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bfc:	fb08 f50e 	mul.w	r5, r8, lr
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	fa00 f001 	lsl.w	r0, r0, r1
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b0>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c14:	f080 8088 	bcs.w	8000d28 <__udivmoddi4+0x2b4>
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	f240 8085 	bls.w	8000d28 <__udivmoddi4+0x2b4>
 8000c1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c22:	4464      	add	r4, ip
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	b29d      	uxth	r5, r3
 8000c28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1da>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c44:	d26c      	bcs.n	8000d20 <__udivmoddi4+0x2ac>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	d96a      	bls.n	8000d20 <__udivmoddi4+0x2ac>
 8000c4a:	3b02      	subs	r3, #2
 8000c4c:	4464      	add	r4, ip
 8000c4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c52:	fba3 9502 	umull	r9, r5, r3, r2
 8000c56:	eba4 040e 	sub.w	r4, r4, lr
 8000c5a:	42ac      	cmp	r4, r5
 8000c5c:	46c8      	mov	r8, r9
 8000c5e:	46ae      	mov	lr, r5
 8000c60:	d356      	bcc.n	8000d10 <__udivmoddi4+0x29c>
 8000c62:	d053      	beq.n	8000d0c <__udivmoddi4+0x298>
 8000c64:	b156      	cbz	r6, 8000c7c <__udivmoddi4+0x208>
 8000c66:	ebb0 0208 	subs.w	r2, r0, r8
 8000c6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c72:	40ca      	lsrs	r2, r1
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	4317      	orrs	r7, r2
 8000c78:	e9c6 7400 	strd	r7, r4, [r6]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	f1c3 0120 	rsb	r1, r3, #32
 8000c88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c90:	fa25 f101 	lsr.w	r1, r5, r1
 8000c94:	409d      	lsls	r5, r3
 8000c96:	432a      	orrs	r2, r5
 8000c98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ca0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ca8:	0c11      	lsrs	r1, r2, #16
 8000caa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cae:	fb00 f50e 	mul.w	r5, r0, lr
 8000cb2:	428d      	cmp	r5, r1
 8000cb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x258>
 8000cba:	eb1c 0101 	adds.w	r1, ip, r1
 8000cbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc2:	d22f      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cc4:	428d      	cmp	r5, r1
 8000cc6:	d92d      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	4461      	add	r1, ip
 8000ccc:	1b49      	subs	r1, r1, r5
 8000cce:	b292      	uxth	r2, r2
 8000cd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce0:	4291      	cmp	r1, r2
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x282>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cec:	d216      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000cee:	4291      	cmp	r1, r2
 8000cf0:	d914      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000cf2:	3d02      	subs	r5, #2
 8000cf4:	4462      	add	r2, ip
 8000cf6:	1a52      	subs	r2, r2, r1
 8000cf8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cfc:	e738      	b.n	8000b70 <__udivmoddi4+0xfc>
 8000cfe:	4631      	mov	r1, r6
 8000d00:	4630      	mov	r0, r6
 8000d02:	e708      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000d04:	4639      	mov	r1, r7
 8000d06:	e6e6      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	e6fb      	b.n	8000b04 <__udivmoddi4+0x90>
 8000d0c:	4548      	cmp	r0, r9
 8000d0e:	d2a9      	bcs.n	8000c64 <__udivmoddi4+0x1f0>
 8000d10:	ebb9 0802 	subs.w	r8, r9, r2
 8000d14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	e7a3      	b.n	8000c64 <__udivmoddi4+0x1f0>
 8000d1c:	4645      	mov	r5, r8
 8000d1e:	e7ea      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d20:	462b      	mov	r3, r5
 8000d22:	e794      	b.n	8000c4e <__udivmoddi4+0x1da>
 8000d24:	4640      	mov	r0, r8
 8000d26:	e7d1      	b.n	8000ccc <__udivmoddi4+0x258>
 8000d28:	46d0      	mov	r8, sl
 8000d2a:	e77b      	b.n	8000c24 <__udivmoddi4+0x1b0>
 8000d2c:	3d02      	subs	r5, #2
 8000d2e:	4462      	add	r2, ip
 8000d30:	e732      	b.n	8000b98 <__udivmoddi4+0x124>
 8000d32:	4608      	mov	r0, r1
 8000d34:	e70a      	b.n	8000b4c <__udivmoddi4+0xd8>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	e742      	b.n	8000bc2 <__udivmoddi4+0x14e>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f000 fee9 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f8d1 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f000 fb5d 	bl	800140c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d52:	f000 f931 	bl	8000fb8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d56:	f000 f981 	bl	800105c <MX_ADC2_Init>
  MX_CAN1_Init();
 8000d5a:	f000 f9d1 	bl	8001100 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d5e:	f000 fa03 	bl	8001168 <MX_CAN2_Init>
  MX_RTC_Init();
 8000d62:	f000 fa35 	bl	80011d0 <MX_RTC_Init>
  MX_TIM3_Init();
 8000d66:	f000 fa59 	bl	800121c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d6a:	f000 fad9 	bl	8001320 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, EN_5V1_1_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d74:	4858      	ldr	r0, [pc, #352]	; (8000ed8 <main+0x198>)
 8000d76:	f001 fead 	bl	8002ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, EN_5V1_2_Pin, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d80:	4856      	ldr	r0, [pc, #344]	; (8000edc <main+0x19c>)
 8000d82:	f001 fea7 	bl	8002ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, EN_5V2_1_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	4852      	ldr	r0, [pc, #328]	; (8000ed8 <main+0x198>)
 8000d8e:	f001 fea1 	bl	8002ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, EN_5V2_2_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2104      	movs	r1, #4
 8000d96:	4852      	ldr	r0, [pc, #328]	; (8000ee0 <main+0x1a0>)
 8000d98:	f001 fe9c 	bl	8002ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, EN_17V_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2104      	movs	r1, #4
 8000da0:	484e      	ldr	r0, [pc, #312]	; (8000edc <main+0x19c>)
 8000da2:	f001 fe97 	bl	8002ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, EN_ODRIVE_1_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2102      	movs	r1, #2
 8000daa:	484b      	ldr	r0, [pc, #300]	; (8000ed8 <main+0x198>)
 8000dac:	f001 fe92 	bl	8002ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, EN_ODRIVE_2_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2108      	movs	r1, #8
 8000db4:	4848      	ldr	r0, [pc, #288]	; (8000ed8 <main+0x198>)
 8000db6:	f001 fe8d 	bl	8002ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN_ODRIVE_3_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2140      	movs	r1, #64	; 0x40
 8000dbe:	4849      	ldr	r0, [pc, #292]	; (8000ee4 <main+0x1a4>)
 8000dc0:	f001 fe88 	bl	8002ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, EN_VBAT_BUCK_Pin, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	4843      	ldr	r0, [pc, #268]	; (8000ed8 <main+0x198>)
 8000dca:	f001 fe83 	bl	8002ad4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPIO_PinState fault_1_1_status = HAL_GPIO_ReadPin(GPIOC, FAULT_5V1_1_Pin);
 8000dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd2:	4841      	ldr	r0, [pc, #260]	; (8000ed8 <main+0x198>)
 8000dd4:	f001 fe66 	bl	8002aa4 <HAL_GPIO_ReadPin>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
	  if(fault_1_1_status == GPIO_PIN_RESET) {
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d105      	bne.n	8000dee <main+0xae>
	      	  HAL_GPIO_WritePin(GPIOC, EN_5V1_1_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de8:	483b      	ldr	r0, [pc, #236]	; (8000ed8 <main+0x198>)
 8000dea:	f001 fe73 	bl	8002ad4 <HAL_GPIO_WritePin>
	  }
	  GPIO_PinState fault_1_2_status = HAL_GPIO_ReadPin(GPIOB, FAULT_5V1_2_Pin);
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	483a      	ldr	r0, [pc, #232]	; (8000edc <main+0x19c>)
 8000df4:	f001 fe56 	bl	8002aa4 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	73bb      	strb	r3, [r7, #14]
	  if(fault_1_2_status == GPIO_PIN_RESET) {
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d105      	bne.n	8000e0e <main+0xce>
	      	  HAL_GPIO_WritePin(GPIOB, EN_5V1_2_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e08:	4834      	ldr	r0, [pc, #208]	; (8000edc <main+0x19c>)
 8000e0a:	f001 fe63 	bl	8002ad4 <HAL_GPIO_WritePin>
	  }
	  GPIO_PinState fault_2_1_status = HAL_GPIO_ReadPin(GPIOC, FAULT_5V2_1_Pin);
 8000e0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e12:	4831      	ldr	r0, [pc, #196]	; (8000ed8 <main+0x198>)
 8000e14:	f001 fe46 	bl	8002aa4 <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	737b      	strb	r3, [r7, #13]
	  if(fault_2_1_status == GPIO_PIN_RESET) {
 8000e1c:	7b7b      	ldrb	r3, [r7, #13]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <main+0xee>
	      	  HAL_GPIO_WritePin(GPIOC, EN_5V2_1_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e28:	482b      	ldr	r0, [pc, #172]	; (8000ed8 <main+0x198>)
 8000e2a:	f001 fe53 	bl	8002ad4 <HAL_GPIO_WritePin>
	  }
	  GPIO_PinState fault_2_2_status = HAL_GPIO_ReadPin(GPIOC, FAULT_5V2_2_Pin);
 8000e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e32:	4829      	ldr	r0, [pc, #164]	; (8000ed8 <main+0x198>)
 8000e34:	f001 fe36 	bl	8002aa4 <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	733b      	strb	r3, [r7, #12]
	  if(fault_2_2_status == GPIO_PIN_RESET) {
 8000e3c:	7b3b      	ldrb	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d104      	bne.n	8000e4c <main+0x10c>
	      	  HAL_GPIO_WritePin(GPIOD, EN_5V2_2_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2104      	movs	r1, #4
 8000e46:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <main+0x1a0>)
 8000e48:	f001 fe44 	bl	8002ad4 <HAL_GPIO_WritePin>
	  }
	  HAL_ADC_Start(&hadc1);
 8000e4c:	4826      	ldr	r0, [pc, #152]	; (8000ee8 <main+0x1a8>)
 8000e4e:	f000 ff1b 	bl	8001c88 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e52:	f04f 31ff 	mov.w	r1, #4294967295
 8000e56:	4824      	ldr	r0, [pc, #144]	; (8000ee8 <main+0x1a8>)
 8000e58:	f000 ffe8 	bl	8001e2c <HAL_ADC_PollForConversion>
	  uint32_t raw = HAL_ADC_GetValue(&hadc1);
 8000e5c:	4822      	ldr	r0, [pc, #136]	; (8000ee8 <main+0x1a8>)
 8000e5e:	f001 f870 	bl	8001f42 <HAL_ADC_GetValue>
 8000e62:	60b8      	str	r0, [r7, #8]
	  raw = raw << 4;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	60bb      	str	r3, [r7, #8]
	  raw = raw >> 4;
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	60bb      	str	r3, [r7, #8]
	  float voltage = (float)raw / 4096.0 * 3.3;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e7a:	ee17 0a90 	vmov	r0, s15
 8000e7e:	f7ff fb27 	bl	80004d0 <__aeabi_f2d>
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <main+0x1ac>)
 8000e88:	f7ff fca4 	bl	80007d4 <__aeabi_ddiv>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	a30e      	add	r3, pc, #56	; (adr r3, 8000ed0 <main+0x190>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	f7ff fb71 	bl	8000580 <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fd7d 	bl	80009a4 <__aeabi_d2f>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	607b      	str	r3, [r7, #4]
	  if (voltage > 3.0) {
 8000eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebe:	dd04      	ble.n	8000eca <main+0x18a>
		  HAL_GPIO_WritePin(GPIOB, EN_17V_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <main+0x19c>)
 8000ec6:	f001 fe05 	bl	8002ad4 <HAL_GPIO_WritePin>
  {
 8000eca:	e780      	b.n	8000dce <main+0x8e>
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	66666666 	.word	0x66666666
 8000ed4:	400a6666 	.word	0x400a6666
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	20000028 	.word	0x20000028
 8000eec:	40b00000 	.word	0x40b00000

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	; 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2234      	movs	r2, #52	; 0x34
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fcec 	bl	80048dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <SystemClock_Config+0xc0>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <SystemClock_Config+0xc0>)
 8000f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <SystemClock_Config+0xc0>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f30:	2300      	movs	r3, #0
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <SystemClock_Config+0xc4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <SystemClock_Config+0xc4>)
 8000f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <SystemClock_Config+0xc4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f50:	230a      	movs	r3, #10
 8000f52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fb85 	bl	800367c <HAL_RCC_OscConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f78:	f000 fb2c 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fdb6 	bl	8002b08 <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000fa2:	f000 fb17 	bl	80015d4 <Error_Handler>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3750      	adds	r7, #80	; 0x50
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <MX_ADC1_Init+0x9c>)
 8000fce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_ADC1_Init+0x98>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_ADC1_Init+0x98>)
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <MX_ADC1_Init+0xa0>)
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_ADC1_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_ADC1_Init+0x98>)
 8001004:	2201      	movs	r2, #1
 8001006:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_ADC1_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_ADC1_Init+0x98>)
 8001012:	2201      	movs	r2, #1
 8001014:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <MX_ADC1_Init+0x98>)
 8001018:	f000 fdf2 	bl	8001c00 <HAL_ADC_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001022:	f000 fad7 	bl	80015d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001026:	2309      	movs	r3, #9
 8001028:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <MX_ADC1_Init+0x98>)
 8001038:	f000 ff90 	bl	8001f5c <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001042:	f000 fac7 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000028 	.word	0x20000028
 8001054:	40012000 	.word	0x40012000
 8001058:	0f000001 	.word	0x0f000001

0800105c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <MX_ADC2_Init+0x98>)
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <MX_ADC2_Init+0x9c>)
 8001072:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_ADC2_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_ADC2_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_ADC2_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_ADC2_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_ADC2_Init+0x98>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_ADC2_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_ADC2_Init+0x98>)
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <MX_ADC2_Init+0xa0>)
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_ADC2_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_ADC2_Init+0x98>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_ADC2_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_ADC2_Init+0x98>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <MX_ADC2_Init+0x98>)
 80010bc:	f000 fda0 	bl	8001c00 <HAL_ADC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80010c6:	f000 fa85 	bl	80015d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC2_Init+0x98>)
 80010dc:	f000 ff3e 	bl	8001f5c <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80010e6:	f000 fa75 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000070 	.word	0x20000070
 80010f8:	40012100 	.word	0x40012100
 80010fc:	0f000001 	.word	0x0f000001

08001100 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_CAN1_Init+0x60>)
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <MX_CAN1_Init+0x64>)
 8001108:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_CAN1_Init+0x60>)
 800110c:	2210      	movs	r2, #16
 800110e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <MX_CAN1_Init+0x60>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_CAN1_Init+0x60>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_CAN1_Init+0x60>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_CAN1_Init+0x60>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MX_CAN1_Init+0x60>)
 800112a:	2200      	movs	r2, #0
 800112c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_CAN1_Init+0x60>)
 8001130:	2200      	movs	r2, #0
 8001132:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_CAN1_Init+0x60>)
 8001136:	2200      	movs	r2, #0
 8001138:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_CAN1_Init+0x60>)
 800113c:	2200      	movs	r2, #0
 800113e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_CAN1_Init+0x60>)
 8001142:	2200      	movs	r2, #0
 8001144:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_CAN1_Init+0x60>)
 8001148:	2200      	movs	r2, #0
 800114a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_CAN1_Init+0x60>)
 800114e:	f001 f933 	bl	80023b8 <HAL_CAN_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001158:	f000 fa3c 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200000b8 	.word	0x200000b8
 8001164:	40006400 	.word	0x40006400

08001168 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_CAN2_Init+0x60>)
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <MX_CAN2_Init+0x64>)
 8001170:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_CAN2_Init+0x60>)
 8001174:	2210      	movs	r2, #16
 8001176:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_CAN2_Init+0x60>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_CAN2_Init+0x60>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_CAN2_Init+0x60>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_CAN2_Init+0x60>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <MX_CAN2_Init+0x60>)
 8001192:	2200      	movs	r2, #0
 8001194:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_CAN2_Init+0x60>)
 8001198:	2200      	movs	r2, #0
 800119a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_CAN2_Init+0x60>)
 800119e:	2200      	movs	r2, #0
 80011a0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_CAN2_Init+0x60>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_CAN2_Init+0x60>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_CAN2_Init+0x60>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_CAN2_Init+0x60>)
 80011b6:	f001 f8ff 	bl	80023b8 <HAL_CAN_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80011c0:	f000 fa08 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000e0 	.word	0x200000e0
 80011cc:	40006800 	.word	0x40006800

080011d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_RTC_Init+0x44>)
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <MX_RTC_Init+0x48>)
 80011d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_RTC_Init+0x44>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_RTC_Init+0x44>)
 80011e2:	227f      	movs	r2, #127	; 0x7f
 80011e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_RTC_Init+0x44>)
 80011e8:	22ff      	movs	r2, #255	; 0xff
 80011ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_RTC_Init+0x44>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <MX_RTC_Init+0x44>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_RTC_Init+0x44>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_RTC_Init+0x44>)
 8001200:	f002 fcda 	bl	8003bb8 <HAL_RTC_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800120a:	f000 f9e3 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000108 	.word	0x20000108
 8001218:	40002800 	.word	0x40002800

0800121c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <MX_TIM3_Init+0xfc>)
 800124e:	4a33      	ldr	r2, [pc, #204]	; (800131c <MX_TIM3_Init+0x100>)
 8001250:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <MX_TIM3_Init+0xfc>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <MX_TIM3_Init+0xfc>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800125e:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <MX_TIM3_Init+0xfc>)
 8001260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001264:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <MX_TIM3_Init+0xfc>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <MX_TIM3_Init+0xfc>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001272:	4829      	ldr	r0, [pc, #164]	; (8001318 <MX_TIM3_Init+0xfc>)
 8001274:	f002 fd9a 	bl	8003dac <HAL_TIM_Base_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800127e:	f000 f9a9 	bl	80015d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128c:	4619      	mov	r1, r3
 800128e:	4822      	ldr	r0, [pc, #136]	; (8001318 <MX_TIM3_Init+0xfc>)
 8001290:	f002 fef6 	bl	8004080 <HAL_TIM_ConfigClockSource>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800129a:	f000 f99b 	bl	80015d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800129e:	481e      	ldr	r0, [pc, #120]	; (8001318 <MX_TIM3_Init+0xfc>)
 80012a0:	f002 fdd3 	bl	8003e4a <HAL_TIM_PWM_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012aa:	f000 f993 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	4619      	mov	r1, r3
 80012bc:	4816      	ldr	r0, [pc, #88]	; (8001318 <MX_TIM3_Init+0xfc>)
 80012be:	f003 fa91 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012c8:	f000 f984 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012cc:	2360      	movs	r3, #96	; 0x60
 80012ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	4619      	mov	r1, r3
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_TIM3_Init+0xfc>)
 80012e4:	f002 fe0a 	bl	8003efc <HAL_TIM_PWM_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012ee:	f000 f971 	bl	80015d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2204      	movs	r2, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <MX_TIM3_Init+0xfc>)
 80012fa:	f002 fdff 	bl	8003efc <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001304:	f000 f966 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <MX_TIM3_Init+0xfc>)
 800130a:	f000 fb41 	bl	8001990 <HAL_TIM_MspPostInit>

}
 800130e:	bf00      	nop
 8001310:	3738      	adds	r7, #56	; 0x38
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000128 	.word	0x20000128
 800131c:	40000400 	.word	0x40000400

08001320 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <MX_TIM4_Init+0xe4>)
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <MX_TIM4_Init+0xe8>)
 8001354:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <MX_TIM4_Init+0xe4>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <MX_TIM4_Init+0xe4>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <MX_TIM4_Init+0xe4>)
 8001364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001368:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_TIM4_Init+0xe4>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <MX_TIM4_Init+0xe4>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001376:	4823      	ldr	r0, [pc, #140]	; (8001404 <MX_TIM4_Init+0xe4>)
 8001378:	f002 fd18 	bl	8003dac <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001382:	f000 f927 	bl	80015d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800138c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001390:	4619      	mov	r1, r3
 8001392:	481c      	ldr	r0, [pc, #112]	; (8001404 <MX_TIM4_Init+0xe4>)
 8001394:	f002 fe74 	bl	8004080 <HAL_TIM_ConfigClockSource>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800139e:	f000 f919 	bl	80015d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <MX_TIM4_Init+0xe4>)
 80013a4:	f002 fd51 	bl	8003e4a <HAL_TIM_PWM_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013ae:	f000 f911 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	4619      	mov	r1, r3
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <MX_TIM4_Init+0xe4>)
 80013c2:	f003 fa0f 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80013cc:	f000 f902 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d0:	2360      	movs	r3, #96	; 0x60
 80013d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM4_Init+0xe4>)
 80013e8:	f002 fd88 	bl	8003efc <HAL_TIM_PWM_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80013f2:	f000 f8ef 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM4_Init+0xe4>)
 80013f8:	f000 faca 	bl	8001990 <HAL_TIM_MspPostInit>

}
 80013fc:	bf00      	nop
 80013fe:	3738      	adds	r7, #56	; 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000170 	.word	0x20000170
 8001408:	40000800 	.word	0x40000800

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a65      	ldr	r2, [pc, #404]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a5e      	ldr	r2, [pc, #376]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a57      	ldr	r2, [pc, #348]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a50      	ldr	r2, [pc, #320]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <MX_GPIO_Init+0x1b4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_5V1_1_Pin|EN_ODRIVE_1_Pin|EN_ODRIVE_2_Pin|EN_VBAT_BUCK_Pin
 80014ae:	2200      	movs	r2, #0
 80014b0:	f644 212a 	movw	r1, #18986	; 0x4a2a
 80014b4:	4843      	ldr	r0, [pc, #268]	; (80015c4 <MX_GPIO_Init+0x1b8>)
 80014b6:	f001 fb0d 	bl	8002ad4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|EN_5V2_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_ODRIVE_3_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 80014c0:	4841      	ldr	r0, [pc, #260]	; (80015c8 <MX_GPIO_Init+0x1bc>)
 80014c2:	f001 fb07 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_17V_Pin|EN_5V1_2_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80014cc:	483f      	ldr	r0, [pc, #252]	; (80015cc <MX_GPIO_Init+0x1c0>)
 80014ce:	f001 fb01 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V2_2_GPIO_Port, EN_5V2_2_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2104      	movs	r1, #4
 80014d6:	483e      	ldr	r0, [pc, #248]	; (80015d0 <MX_GPIO_Init+0x1c4>)
 80014d8:	f001 fafc 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FAULT_5V1_1_Pin FAULT_5V2_1_Pin FAULT_5V2_2_Pin */
  GPIO_InitStruct.Pin = FAULT_5V1_1_Pin|FAULT_5V2_1_Pin|FAULT_5V2_2_Pin;
 80014dc:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4834      	ldr	r0, [pc, #208]	; (80015c4 <MX_GPIO_Init+0x1b8>)
 80014f2:	f001 f943 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_5V1_1_Pin EN_ODRIVE_1_Pin EN_ODRIVE_2_Pin EN_VBAT_BUCK_Pin
                           PC9 EN_5V2_1_Pin */
  GPIO_InitStruct.Pin = EN_5V1_1_Pin|EN_ODRIVE_1_Pin|EN_ODRIVE_2_Pin|EN_VBAT_BUCK_Pin
 80014f6:	f644 232a 	movw	r3, #18986	; 0x4a2a
 80014fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|EN_5V2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <MX_GPIO_Init+0x1b8>)
 8001510:	f001 f934 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_ODRIVE_1_Pin LOAD_ODRIVE_2_Pin */
  GPIO_InitStruct.Pin = LOAD_ODRIVE_1_Pin|LOAD_ODRIVE_2_Pin;
 8001514:	2305      	movs	r3, #5
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001518:	2303      	movs	r3, #3
 800151a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4827      	ldr	r0, [pc, #156]	; (80015c4 <MX_GPIO_Init+0x1b8>)
 8001528:	f001 f928 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : LOAD_ODRIVE_3_Pin */
  GPIO_InitStruct.Pin = LOAD_ODRIVE_3_Pin;
 800152c:	2320      	movs	r3, #32
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001530:	2303      	movs	r3, #3
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOAD_ODRIVE_3_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4822      	ldr	r0, [pc, #136]	; (80015c8 <MX_GPIO_Init+0x1bc>)
 8001540:	f001 f91c 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_ODRIVE_3_Pin LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = EN_ODRIVE_3_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8001544:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	481a      	ldr	r0, [pc, #104]	; (80015c8 <MX_GPIO_Init+0x1bc>)
 800155e:	f001 f90d 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_17V_Pin EN_5V1_2_Pin */
  GPIO_InitStruct.Pin = EN_17V_Pin|EN_5V1_2_Pin;
 8001562:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <MX_GPIO_Init+0x1c0>)
 800157c:	f001 f8fe 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V2_2_Pin */
  GPIO_InitStruct.Pin = EN_5V2_2_Pin;
 8001580:	2304      	movs	r3, #4
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V2_2_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	480e      	ldr	r0, [pc, #56]	; (80015d0 <MX_GPIO_Init+0x1c4>)
 8001598:	f001 f8f0 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_5V1_2_Pin */
  GPIO_InitStruct.Pin = FAULT_5V1_2_Pin;
 800159c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_5V1_2_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_GPIO_Init+0x1c0>)
 80015b2:	f001 f8e3 	bl	800277c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	; 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>
	...

080015e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <HAL_MspInit+0x4c>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_MspInit+0x4c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a48      	ldr	r2, [pc, #288]	; (8001770 <HAL_ADC_MspInit+0x140>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d15c      	bne.n	800170c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a46      	ldr	r2, [pc, #280]	; (8001774 <HAL_ADC_MspInit+0x144>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	623b      	str	r3, [r7, #32]
 800166c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	4b40      	ldr	r3, [pc, #256]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a3f      	ldr	r2, [pc, #252]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a38      	ldr	r2, [pc, #224]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_ADC_MspInit+0x144>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	4b32      	ldr	r3, [pc, #200]	; (8001774 <HAL_ADC_MspInit+0x144>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a31      	ldr	r2, [pc, #196]	; (8001774 <HAL_ADC_MspInit+0x144>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <HAL_ADC_MspInit+0x144>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_INPUT_5V_2_Pin|ADC_INPUT_5V_1_Pin|LOAD_VBAT_BUCK_Pin;
 80016c2:	2392      	movs	r3, #146	; 0x92
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c6:	2303      	movs	r3, #3
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	4619      	mov	r1, r3
 80016d4:	4828      	ldr	r0, [pc, #160]	; (8001778 <HAL_ADC_MspInit+0x148>)
 80016d6:	f001 f851 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBAT_ADC_INPUT_Pin;
 80016da:	2310      	movs	r3, #16
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016de:	2303      	movs	r3, #3
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBAT_ADC_INPUT_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4823      	ldr	r0, [pc, #140]	; (800177c <HAL_ADC_MspInit+0x14c>)
 80016ee:	f001 f845 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_17V_INPUT_Pin|LOAD_17V_Pin;
 80016f2:	2303      	movs	r3, #3
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001702:	4619      	mov	r1, r3
 8001704:	481e      	ldr	r0, [pc, #120]	; (8001780 <HAL_ADC_MspInit+0x150>)
 8001706:	f001 f839 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800170a:	e02c      	b.n	8001766 <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <HAL_ADC_MspInit+0x154>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d127      	bne.n	8001766 <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_ADC_MspInit+0x144>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_ADC_MspInit+0x144>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_ADC_MspInit+0x144>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_INPUT_5V_1_Pin;
 800174e:	2310      	movs	r3, #16
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001752:	2303      	movs	r3, #3
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ADC_INPUT_5V_1_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <HAL_ADC_MspInit+0x148>)
 8001762:	f001 f80b 	bl	800277c <HAL_GPIO_Init>
}
 8001766:	bf00      	nop
 8001768:	3738      	adds	r7, #56	; 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40012000 	.word	0x40012000
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020800 	.word	0x40020800
 8001780:	40020400 	.word	0x40020400
 8001784:	40012100 	.word	0x40012100

08001788 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a43      	ldr	r2, [pc, #268]	; (80018b4 <HAL_CAN_MspInit+0x12c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d136      	bne.n	8001818 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <HAL_CAN_MspInit+0x130>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a41      	ldr	r2, [pc, #260]	; (80018b8 <HAL_CAN_MspInit+0x130>)
 80017b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80017b4:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <HAL_CAN_MspInit+0x130>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d10d      	bne.n	80017d8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <HAL_CAN_MspInit+0x134>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a3d      	ldr	r2, [pc, #244]	; (80018bc <HAL_CAN_MspInit+0x134>)
 80017c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_CAN_MspInit+0x134>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_CAN_MspInit+0x134>)
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	4a36      	ldr	r2, [pc, #216]	; (80018bc <HAL_CAN_MspInit+0x134>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6313      	str	r3, [r2, #48]	; 0x30
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_CAN_MspInit+0x134>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_A_Pin|CAN_TX_A_Pin;
 80017f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001806:	2309      	movs	r3, #9
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	482b      	ldr	r0, [pc, #172]	; (80018c0 <HAL_CAN_MspInit+0x138>)
 8001812:	f000 ffb3 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001816:	e048      	b.n	80018aa <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <HAL_CAN_MspInit+0x13c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d143      	bne.n	80018aa <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <HAL_CAN_MspInit+0x134>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a24      	ldr	r2, [pc, #144]	; (80018bc <HAL_CAN_MspInit+0x134>)
 800182c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <HAL_CAN_MspInit+0x134>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_CAN_MspInit+0x130>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <HAL_CAN_MspInit+0x130>)
 8001846:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_CAN_MspInit+0x130>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10d      	bne.n	800186c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_CAN_MspInit+0x134>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a18      	ldr	r2, [pc, #96]	; (80018bc <HAL_CAN_MspInit+0x134>)
 800185a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_CAN_MspInit+0x134>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_CAN_MspInit+0x134>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <HAL_CAN_MspInit+0x134>)
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_CAN_MspInit+0x134>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAN_RX_B_Pin|CAN_TX_B_Pin;
 8001888:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800189a:	2309      	movs	r3, #9
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4808      	ldr	r0, [pc, #32]	; (80018c8 <HAL_CAN_MspInit+0x140>)
 80018a6:	f000 ff69 	bl	800277c <HAL_GPIO_Init>
}
 80018aa:	bf00      	nop
 80018ac:	3730      	adds	r7, #48	; 0x30
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40006400 	.word	0x40006400
 80018b8:	200001b8 	.word	0x200001b8
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40006800 	.word	0x40006800
 80018c8:	40020400 	.word	0x40020400

080018cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b09a      	sub	sp, #104	; 0x68
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	225c      	movs	r2, #92	; 0x5c
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fffd 	bl	80048dc <memset>
  if(hrtc->Instance==RTC)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <HAL_RTC_MspInit+0x4c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018ec:	2320      	movs	r3, #32
 80018ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 f9ea 	bl	8002cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001906:	f7ff fe65 	bl	80015d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_RTC_MspInit+0x50>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001910:	bf00      	nop
 8001912:	3768      	adds	r7, #104	; 0x68
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40002800 	.word	0x40002800
 800191c:	42470e3c 	.word	0x42470e3c

08001920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a15      	ldr	r2, [pc, #84]	; (8001984 <HAL_TIM_Base_MspInit+0x64>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d10e      	bne.n	8001950 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_TIM_Base_MspInit+0x68>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <HAL_TIM_Base_MspInit+0x68>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_TIM_Base_MspInit+0x68>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800194e:	e012      	b.n	8001976 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <HAL_TIM_Base_MspInit+0x6c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d10d      	bne.n	8001976 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_TIM_Base_MspInit+0x68>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_TIM_Base_MspInit+0x68>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_TIM_Base_MspInit+0x68>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40000400 	.word	0x40000400
 8001988:	40023800 	.word	0x40023800
 800198c:	40000800 	.word	0x40000800

08001990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <HAL_TIM_MspPostInit+0xb0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d11e      	bne.n	80019f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_TIM_MspPostInit+0xb4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_TIM_MspPostInit+0xb4>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_TIM_MspPostInit+0xb4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_MATRIX_B_PWM_Pin|LED_MATRIX_G_PWM_Pin;
 80019ce:	2330      	movs	r3, #48	; 0x30
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019de:	2302      	movs	r3, #2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4817      	ldr	r0, [pc, #92]	; (8001a48 <HAL_TIM_MspPostInit+0xb8>)
 80019ea:	f000 fec7 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019ee:	e022      	b.n	8001a36 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <HAL_TIM_MspPostInit+0xbc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d11d      	bne.n	8001a36 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_TIM_MspPostInit+0xb4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_TIM_MspPostInit+0xb4>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_TIM_MspPostInit+0xb4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_MATRIX_R_PWM_Pin;
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a26:	2302      	movs	r3, #2
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_MATRIX_R_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_TIM_MspPostInit+0xb8>)
 8001a32:	f000 fea3 	bl	800277c <HAL_GPIO_Init>
}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40000800 	.word	0x40000800

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9c:	f000 f890 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ace:	490e      	ldr	r1, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad4:	e002      	b.n	8001adc <LoopCopyDataInit>

08001ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ada:	3304      	adds	r3, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae0:	d3f9      	bcc.n	8001ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae4:	4c0b      	ldr	r4, [pc, #44]	; (8001b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae8:	e001      	b.n	8001aee <LoopFillZerobss>

08001aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aec:	3204      	adds	r2, #4

08001aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af0:	d3fb      	bcc.n	8001aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af2:	f7ff ffd7 	bl	8001aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af6:	f002 fef9 	bl	80048ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afa:	f7ff f921 	bl	8000d40 <main>
  bx  lr    
 8001afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b0c:	0800496c 	.word	0x0800496c
  ldr r2, =_sbss
 8001b10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b14:	200001c0 	.word	0x200001c0

08001b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <ADC_IRQHandler>
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <HAL_Init+0x40>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_Init+0x40>)
 8001b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_Init+0x40>)
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 fde5 	bl	8002714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f000 f808 	bl	8001b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff fd46 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x54>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x58>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fdef 	bl	8002762 <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f000 fdc5 	bl	800272a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_InitTick+0x5c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008
 8001be4:	200001bc 	.word	0x200001bc

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	200001bc 	.word	0x200001bc

08001c00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e033      	b.n	8001c7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fd06 	bl	8001630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c46:	f023 0302 	bic.w	r3, r3, #2
 8001c4a:	f043 0202 	orr.w	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fab4 	bl	80021c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f023 0303 	bic.w	r3, r3, #3
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c6e:	e001      	b.n	8001c74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Start+0x1a>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e0b2      	b.n	8001e08 <HAL_ADC_Start+0x180>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d018      	beq.n	8001cea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc8:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <HAL_ADC_Start+0x18c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_ADC_Start+0x190>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0c9a      	lsrs	r2, r3, #18
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f9      	bne.n	8001cde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d17a      	bne.n	8001dee <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d36:	d106      	bne.n	8001d46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f023 0206 	bic.w	r2, r3, #6
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d54:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_ADC_Start+0x194>)
 8001d56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d12a      	bne.n	8001dc4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2b      	ldr	r2, [pc, #172]	; (8001e20 <HAL_ADC_Start+0x198>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d015      	beq.n	8001da4 <HAL_ADC_Start+0x11c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a29      	ldr	r2, [pc, #164]	; (8001e24 <HAL_ADC_Start+0x19c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d105      	bne.n	8001d8e <HAL_ADC_Start+0x106>
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_ADC_Start+0x194>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <HAL_ADC_Start+0x1a0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d136      	bne.n	8001e06 <HAL_ADC_Start+0x17e>
 8001d98:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_ADC_Start+0x194>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d130      	bne.n	8001e06 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d129      	bne.n	8001e06 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	e020      	b.n	8001e06 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_ADC_Start+0x198>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d11b      	bne.n	8001e06 <HAL_ADC_Start+0x17e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d114      	bne.n	8001e06 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	e00b      	b.n	8001e06 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f043 0210 	orr.w	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	20000000 	.word	0x20000000
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	40012300 	.word	0x40012300
 8001e20:	40012000 	.word	0x40012000
 8001e24:	40012100 	.word	0x40012100
 8001e28:	40012200 	.word	0x40012200

08001e2c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e48:	d113      	bne.n	8001e72 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e58:	d10b      	bne.n	8001e72 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f043 0220 	orr.w	r2, r3, #32
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e063      	b.n	8001f3a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e72:	f7ff feb9 	bl	8001be8 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e78:	e021      	b.n	8001ebe <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d01d      	beq.n	8001ebe <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <HAL_ADC_PollForConversion+0x6c>
 8001e88:	f7ff feae 	bl	8001be8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d212      	bcs.n	8001ebe <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d00b      	beq.n	8001ebe <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f043 0204 	orr.w	r2, r3, #4
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e03d      	b.n	8001f3a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d1d6      	bne.n	8001e7a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0212 	mvn.w	r2, #18
 8001ed4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d123      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d11f      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d105      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1c>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e113      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x244>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b09      	cmp	r3, #9
 8001f86:	d925      	bls.n	8001fd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68d9      	ldr	r1, [r3, #12]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b1e      	subs	r3, #30
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68d9      	ldr	r1, [r3, #12]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4403      	add	r3, r0
 8001fc6:	3b1e      	subs	r3, #30
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	e022      	b.n	800201a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6919      	ldr	r1, [r3, #16]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	2207      	movs	r2, #7
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6919      	ldr	r1, [r3, #16]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	4603      	mov	r3, r0
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4403      	add	r3, r0
 8002010:	409a      	lsls	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b06      	cmp	r3, #6
 8002020:	d824      	bhi.n	800206c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b05      	subs	r3, #5
 8002034:	221f      	movs	r2, #31
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	400a      	ands	r2, r1
 8002042:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b05      	subs	r3, #5
 800205e:	fa00 f203 	lsl.w	r2, r0, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	635a      	str	r2, [r3, #52]	; 0x34
 800206a:	e04c      	b.n	8002106 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	d824      	bhi.n	80020be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b23      	subs	r3, #35	; 0x23
 8002086:	221f      	movs	r2, #31
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43da      	mvns	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	400a      	ands	r2, r1
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b23      	subs	r3, #35	; 0x23
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
 80020bc:	e023      	b.n	8002106 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b41      	subs	r3, #65	; 0x41
 80020d0:	221f      	movs	r2, #31
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	400a      	ands	r2, r1
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b41      	subs	r3, #65	; 0x41
 80020fa:	fa00 f203 	lsl.w	r2, r0, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_ADC_ConfigChannel+0x250>)
 8002108:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_ADC_ConfigChannel+0x254>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d10f      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1d8>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b12      	cmp	r3, #18
 800211a:	d10b      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <HAL_ADC_ConfigChannel+0x254>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d12b      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x23a>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <HAL_ADC_ConfigChannel+0x258>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d003      	beq.n	8002150 <HAL_ADC_ConfigChannel+0x1f4>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b11      	cmp	r3, #17
 800214e:	d122      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <HAL_ADC_ConfigChannel+0x258>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d111      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_ADC_ConfigChannel+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_ADC_ConfigChannel+0x260>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	0c9a      	lsrs	r2, r3, #18
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002188:	e002      	b.n	8002190 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3b01      	subs	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40012300 	.word	0x40012300
 80021b0:	40012000 	.word	0x40012000
 80021b4:	10000012 	.word	0x10000012
 80021b8:	20000000 	.word	0x20000000
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c8:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <ADC_Init+0x1f0>)
 80021ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	021a      	lsls	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <ADC_Init+0x1f4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002266:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e00f      	b.n	80022be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0202 	bic.w	r2, r2, #2
 80022cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7e1b      	ldrb	r3, [r3, #24]
 80022d8:	005a      	lsls	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800230a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	3b01      	subs	r3, #1
 8002318:	035a      	lsls	r2, r3, #13
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e007      	b.n	8002334 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002332:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	3b01      	subs	r3, #1
 8002350:	051a      	lsls	r2, r3, #20
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002376:	025a      	lsls	r2, r3, #9
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	029a      	lsls	r2, r3, #10
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40012300 	.word	0x40012300
 80023b4:	0f000001 	.word	0x0f000001

080023b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0ed      	b.n	80025a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff f9d6 	bl	8001788 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ec:	f7ff fbfc 	bl	8001be8 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023f2:	e012      	b.n	800241a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023f4:	f7ff fbf8 	bl	8001be8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b0a      	cmp	r3, #10
 8002400:	d90b      	bls.n	800241a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2205      	movs	r2, #5
 8002412:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0c5      	b.n	80025a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0e5      	beq.n	80023f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0202 	bic.w	r2, r2, #2
 8002436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002438:	f7ff fbd6 	bl	8001be8 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800243e:	e012      	b.n	8002466 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002440:	f7ff fbd2 	bl	8001be8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b0a      	cmp	r3, #10
 800244c:	d90b      	bls.n	8002466 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2205      	movs	r2, #5
 800245e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e09f      	b.n	80025a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e007      	b.n	800249e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7e5b      	ldrb	r3, [r3, #25]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e007      	b.n	80024c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7e9b      	ldrb	r3, [r3, #26]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0220 	orr.w	r2, r2, #32
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e007      	b.n	80024f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0220 	bic.w	r2, r2, #32
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7edb      	ldrb	r3, [r3, #27]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d108      	bne.n	800250c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0210 	bic.w	r2, r2, #16
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	e007      	b.n	800251c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0210 	orr.w	r2, r2, #16
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7f1b      	ldrb	r3, [r3, #28]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0208 	orr.w	r2, r2, #8
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e007      	b.n	8002546 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7f5b      	ldrb	r3, [r3, #29]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0204 	orr.w	r2, r2, #4
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e007      	b.n	8002570 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	ea42 0103 	orr.w	r1, r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e2:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <__NVIC_GetPriorityGrouping+0x18>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	f003 0307 	and.w	r3, r3, #7
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e0:	d301      	bcc.n	80026e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00f      	b.n	8002706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <SysTick_Config+0x40>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ee:	210f      	movs	r1, #15
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f7ff ff8e 	bl	8002614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <SysTick_Config+0x40>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <SysTick_Config+0x40>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010

08002714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ff47 	bl	80025b0 <__NVIC_SetPriorityGrouping>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800273c:	f7ff ff5c 	bl	80025f8 <__NVIC_GetPriorityGrouping>
 8002740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	6978      	ldr	r0, [r7, #20]
 8002748:	f7ff ff8e 	bl	8002668 <NVIC_EncodePriority>
 800274c:	4602      	mov	r2, r0
 800274e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff5d 	bl	8002614 <__NVIC_SetPriority>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffb0 	bl	80026d0 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e165      	b.n	8002a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 8154 	bne.w	8002a5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d005      	beq.n	80027ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d130      	bne.n	8002830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0201 	and.w	r2, r3, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d017      	beq.n	800286c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d123      	bne.n	80028c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80ae 	beq.w	8002a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <HAL_GPIO_Init+0x300>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a5c      	ldr	r2, [pc, #368]	; (8002a7c <HAL_GPIO_Init+0x300>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b5a      	ldr	r3, [pc, #360]	; (8002a7c <HAL_GPIO_Init+0x300>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291e:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_GPIO_Init+0x304>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4f      	ldr	r2, [pc, #316]	; (8002a84 <HAL_GPIO_Init+0x308>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d025      	beq.n	8002996 <HAL_GPIO_Init+0x21a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4e      	ldr	r2, [pc, #312]	; (8002a88 <HAL_GPIO_Init+0x30c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01f      	beq.n	8002992 <HAL_GPIO_Init+0x216>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4d      	ldr	r2, [pc, #308]	; (8002a8c <HAL_GPIO_Init+0x310>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d019      	beq.n	800298e <HAL_GPIO_Init+0x212>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4c      	ldr	r2, [pc, #304]	; (8002a90 <HAL_GPIO_Init+0x314>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_GPIO_Init+0x20e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4b      	ldr	r2, [pc, #300]	; (8002a94 <HAL_GPIO_Init+0x318>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00d      	beq.n	8002986 <HAL_GPIO_Init+0x20a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4a      	ldr	r2, [pc, #296]	; (8002a98 <HAL_GPIO_Init+0x31c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <HAL_GPIO_Init+0x206>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a49      	ldr	r2, [pc, #292]	; (8002a9c <HAL_GPIO_Init+0x320>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_GPIO_Init+0x202>
 800297a:	2306      	movs	r3, #6
 800297c:	e00c      	b.n	8002998 <HAL_GPIO_Init+0x21c>
 800297e:	2307      	movs	r3, #7
 8002980:	e00a      	b.n	8002998 <HAL_GPIO_Init+0x21c>
 8002982:	2305      	movs	r3, #5
 8002984:	e008      	b.n	8002998 <HAL_GPIO_Init+0x21c>
 8002986:	2304      	movs	r3, #4
 8002988:	e006      	b.n	8002998 <HAL_GPIO_Init+0x21c>
 800298a:	2303      	movs	r3, #3
 800298c:	e004      	b.n	8002998 <HAL_GPIO_Init+0x21c>
 800298e:	2302      	movs	r3, #2
 8002990:	e002      	b.n	8002998 <HAL_GPIO_Init+0x21c>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_GPIO_Init+0x21c>
 8002996:	2300      	movs	r3, #0
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	f002 0203 	and.w	r2, r2, #3
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	4093      	lsls	r3, r2
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a8:	4935      	ldr	r1, [pc, #212]	; (8002a80 <HAL_GPIO_Init+0x304>)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b6:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029da:	4a31      	ldr	r2, [pc, #196]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e0:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0a:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a58:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3301      	adds	r3, #1
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	f67f ae96 	bls.w	8002798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3724      	adds	r7, #36	; 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40013800 	.word	0x40013800
 8002a84:	40020000 	.word	0x40020000
 8002a88:	40020400 	.word	0x40020400
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40020c00 	.word	0x40020c00
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40021400 	.word	0x40021400
 8002a9c:	40021800 	.word	0x40021800
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e001      	b.n	8002ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af0:	e003      	b.n	8002afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	041a      	lsls	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	619a      	str	r2, [r3, #24]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d90c      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b8      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a58      	ldr	r2, [pc, #352]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	494d      	ldr	r1, [pc, #308]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d044      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e067      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fff6 	bl	8001be8 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe fff2 	bl	8001be8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e04f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d20c      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e032      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4916      	ldr	r1, [pc, #88]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 fb4b 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe ff56 	bl	8001b60 <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	0800494c 	.word	0x0800494c
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08c      	sub	sp, #48	; 0x30
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d12:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	496c      	ldr	r1, [pc, #432]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d3a:	4b64      	ldr	r3, [pc, #400]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d40:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	4960      	ldr	r1, [pc, #384]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d68:	4b58      	ldr	r3, [pc, #352]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4955      	ldr	r1, [pc, #340]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d86:	d101      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002d94:	2301      	movs	r3, #1
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d017      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002da4:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002daa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	4946      	ldr	r1, [pc, #280]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 808a 	beq.w	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	4a38      	ldr	r2, [pc, #224]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6413      	str	r3, [r2, #64]	; 0x40
 8002df2:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002dfe:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a33      	ldr	r2, [pc, #204]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e0a:	f7fe feed 	bl	8001be8 <HAL_GetTick>
 8002e0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe fee9 	bl	8001be8 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e278      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e30:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e38:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d02f      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e48:	6a3a      	ldr	r2, [r7, #32]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d028      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e56:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e64:	4a19      	ldr	r2, [pc, #100]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d114      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe feb7 	bl	8001be8 <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe feb3 	bl	8001be8 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e240      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ee      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eac:	d114      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec2:	4902      	ldr	r1, [pc, #8]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
 8002ec8:	e00c      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42470e40 	.word	0x42470e40
 8002ed8:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a49      	ldr	r2, [pc, #292]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ede:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ee2:	6093      	str	r3, [r2, #8]
 8002ee4:	4b47      	ldr	r3, [pc, #284]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ee6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	4944      	ldr	r1, [pc, #272]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002f08:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f0a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002f18:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	4937      	ldr	r1, [pc, #220]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f3a:	4b32      	ldr	r3, [pc, #200]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f40:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f48:	492e      	ldr	r1, [pc, #184]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d011      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f5c:	4b29      	ldr	r3, [pc, #164]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f62:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	4926      	ldr	r1, [pc, #152]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	491a      	ldr	r1, [pc, #104]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d011      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fbc:	4911      	ldr	r1, [pc, #68]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe0:	f040 80ff 	bne.w	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fea:	f7fe fdfd 	bl	8001be8 <HAL_GetTick>
 8002fee:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ff0:	e00e      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ff2:	f7fe fdf9 	bl	8001be8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d907      	bls.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e188      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003004:	40023800 	.word	0x40023800
 8003008:	424711e0 	.word	0x424711e0
 800300c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003010:	4b7e      	ldr	r3, [pc, #504]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ea      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003038:	2b00      	cmp	r3, #0
 800303a:	d028      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d124      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003044:	4b71      	ldr	r3, [pc, #452]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	3301      	adds	r3, #1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003056:	4b6d      	ldr	r3, [pc, #436]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305c:	0e1b      	lsrs	r3, r3, #24
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	431a      	orrs	r2, r3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	431a      	orrs	r2, r3
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	061b      	lsls	r3, r3, #24
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	071b      	lsls	r3, r3, #28
 8003086:	4961      	ldr	r1, [pc, #388]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d035      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b8:	d130      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030ba:	4b54      	ldr	r3, [pc, #336]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	3301      	adds	r3, #1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030cc:	4b4f      	ldr	r3, [pc, #316]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d2:	0f1b      	lsrs	r3, r3, #28
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	019b      	lsls	r3, r3, #6
 80030e4:	431a      	orrs	r2, r3
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	431a      	orrs	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	071b      	lsls	r3, r3, #28
 80030fc:	4943      	ldr	r1, [pc, #268]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800310a:	f023 021f 	bic.w	r2, r3, #31
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	3b01      	subs	r3, #1
 8003114:	493d      	ldr	r1, [pc, #244]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d029      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003130:	d124      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800314a:	0f1b      	lsrs	r3, r3, #28
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	019b      	lsls	r3, r3, #6
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	3b01      	subs	r3, #1
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	431a      	orrs	r2, r3
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	071b      	lsls	r3, r3, #28
 8003174:	4925      	ldr	r1, [pc, #148]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003184:	2b00      	cmp	r3, #0
 8003186:	d016      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	071b      	lsls	r3, r3, #28
 80031ae:	4917      	ldr	r1, [pc, #92]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031bc:	f7fe fd14 	bl	8001be8 <HAL_GetTick>
 80031c0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031c4:	f7fe fd10 	bl	8001be8 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e09f      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	f040 8095 	bne.w	8003314 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031f0:	f7fe fcfa 	bl	8001be8 <HAL_GetTick>
 80031f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031f6:	e00f      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031f8:	f7fe fcf6 	bl	8001be8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d908      	bls.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e085      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	42470068 	.word	0x42470068
 8003214:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003218:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003224:	d0e8      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003242:	2b00      	cmp	r3, #0
 8003244:	d02b      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	2b00      	cmp	r3, #0
 800324c:	d127      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800324e:	4b34      	ldr	r3, [pc, #208]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	3301      	adds	r3, #1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	431a      	orrs	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	3b01      	subs	r3, #1
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	061b      	lsls	r3, r3, #24
 800327c:	4928      	ldr	r1, [pc, #160]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003284:	4b26      	ldr	r3, [pc, #152]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	3b01      	subs	r3, #1
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	4922      	ldr	r1, [pc, #136]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01d      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b2:	d118      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	0e1b      	lsrs	r3, r3, #24
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	019b      	lsls	r3, r3, #6
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	3b01      	subs	r3, #1
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	431a      	orrs	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	4910      	ldr	r1, [pc, #64]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032e6:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032ec:	f7fe fc7c 	bl	8001be8 <HAL_GetTick>
 80032f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032f4:	f7fe fc78 	bl	8001be8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e007      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800330e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003312:	d1ef      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3730      	adds	r7, #48	; 0x30
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	42470070 	.word	0x42470070

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800332c:	b0a6      	sub	sp, #152	; 0x98
 800332e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800334e:	4bc8      	ldr	r3, [pc, #800]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b0c      	cmp	r3, #12
 8003358:	f200 817e 	bhi.w	8003658 <HAL_RCC_GetSysClockFreq+0x330>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_RCC_GetSysClockFreq+0x3c>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003399 	.word	0x08003399
 8003368:	08003659 	.word	0x08003659
 800336c:	08003659 	.word	0x08003659
 8003370:	08003659 	.word	0x08003659
 8003374:	080033a1 	.word	0x080033a1
 8003378:	08003659 	.word	0x08003659
 800337c:	08003659 	.word	0x08003659
 8003380:	08003659 	.word	0x08003659
 8003384:	080033a9 	.word	0x080033a9
 8003388:	08003659 	.word	0x08003659
 800338c:	08003659 	.word	0x08003659
 8003390:	08003659 	.word	0x08003659
 8003394:	08003513 	.word	0x08003513
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4bb6      	ldr	r3, [pc, #728]	; (8003674 <HAL_RCC_GetSysClockFreq+0x34c>)
 800339a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800339e:	e15f      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033a0:	4bb5      	ldr	r3, [pc, #724]	; (8003678 <HAL_RCC_GetSysClockFreq+0x350>)
 80033a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80033a6:	e15b      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a8:	4bb1      	ldr	r3, [pc, #708]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b4:	4bae      	ldr	r3, [pc, #696]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d031      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c0:	4bab      	ldr	r3, [pc, #684]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	2200      	movs	r2, #0
 80033c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d2:	663b      	str	r3, [r7, #96]	; 0x60
 80033d4:	2300      	movs	r3, #0
 80033d6:	667b      	str	r3, [r7, #100]	; 0x64
 80033d8:	4ba7      	ldr	r3, [pc, #668]	; (8003678 <HAL_RCC_GetSysClockFreq+0x350>)
 80033da:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80033de:	462a      	mov	r2, r5
 80033e0:	fb03 f202 	mul.w	r2, r3, r2
 80033e4:	2300      	movs	r3, #0
 80033e6:	4621      	mov	r1, r4
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	4aa2      	ldr	r2, [pc, #648]	; (8003678 <HAL_RCC_GetSysClockFreq+0x350>)
 80033f0:	4621      	mov	r1, r4
 80033f2:	fba1 1202 	umull	r1, r2, r1, r2
 80033f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033f8:	460a      	mov	r2, r1
 80033fa:	67ba      	str	r2, [r7, #120]	; 0x78
 80033fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80033fe:	4413      	add	r3, r2
 8003400:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003406:	2200      	movs	r2, #0
 8003408:	65bb      	str	r3, [r7, #88]	; 0x58
 800340a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800340c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003410:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003414:	f7fd fb16 	bl	8000a44 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003422:	e064      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003424:	4b92      	ldr	r3, [pc, #584]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	2200      	movs	r2, #0
 800342c:	653b      	str	r3, [r7, #80]	; 0x50
 800342e:	657a      	str	r2, [r7, #84]	; 0x54
 8003430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48
 8003438:	2300      	movs	r3, #0
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800343c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003440:	4622      	mov	r2, r4
 8003442:	462b      	mov	r3, r5
 8003444:	f04f 0000 	mov.w	r0, #0
 8003448:	f04f 0100 	mov.w	r1, #0
 800344c:	0159      	lsls	r1, r3, #5
 800344e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003452:	0150      	lsls	r0, r2, #5
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4621      	mov	r1, r4
 800345a:	1a51      	subs	r1, r2, r1
 800345c:	6139      	str	r1, [r7, #16]
 800345e:	4629      	mov	r1, r5
 8003460:	eb63 0301 	sbc.w	r3, r3, r1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003472:	4659      	mov	r1, fp
 8003474:	018b      	lsls	r3, r1, #6
 8003476:	4651      	mov	r1, sl
 8003478:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800347c:	4651      	mov	r1, sl
 800347e:	018a      	lsls	r2, r1, #6
 8003480:	4651      	mov	r1, sl
 8003482:	ebb2 0801 	subs.w	r8, r2, r1
 8003486:	4659      	mov	r1, fp
 8003488:	eb63 0901 	sbc.w	r9, r3, r1
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003498:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800349c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a0:	4690      	mov	r8, r2
 80034a2:	4699      	mov	r9, r3
 80034a4:	4623      	mov	r3, r4
 80034a6:	eb18 0303 	adds.w	r3, r8, r3
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	462b      	mov	r3, r5
 80034ae:	eb49 0303 	adc.w	r3, r9, r3
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034c0:	4629      	mov	r1, r5
 80034c2:	028b      	lsls	r3, r1, #10
 80034c4:	4621      	mov	r1, r4
 80034c6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034ca:	4621      	mov	r1, r4
 80034cc:	028a      	lsls	r2, r1, #10
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034d6:	2200      	movs	r2, #0
 80034d8:	643b      	str	r3, [r7, #64]	; 0x40
 80034da:	647a      	str	r2, [r7, #68]	; 0x44
 80034dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034e0:	f7fd fab0 	bl	8000a44 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4613      	mov	r3, r2
 80034ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ee:	4b60      	ldr	r3, [pc, #384]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0c1b      	lsrs	r3, r3, #16
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	3301      	adds	r3, #1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003500:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003510:	e0a6      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003512:	4b57      	ldr	r3, [pc, #348]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800351a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800351e:	4b54      	ldr	r3, [pc, #336]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02a      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352a:	4b51      	ldr	r3, [pc, #324]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	2200      	movs	r2, #0
 8003532:	63bb      	str	r3, [r7, #56]	; 0x38
 8003534:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800353c:	2100      	movs	r1, #0
 800353e:	4b4e      	ldr	r3, [pc, #312]	; (8003678 <HAL_RCC_GetSysClockFreq+0x350>)
 8003540:	fb03 f201 	mul.w	r2, r3, r1
 8003544:	2300      	movs	r3, #0
 8003546:	fb00 f303 	mul.w	r3, r0, r3
 800354a:	4413      	add	r3, r2
 800354c:	4a4a      	ldr	r2, [pc, #296]	; (8003678 <HAL_RCC_GetSysClockFreq+0x350>)
 800354e:	fba0 1202 	umull	r1, r2, r0, r2
 8003552:	677a      	str	r2, [r7, #116]	; 0x74
 8003554:	460a      	mov	r2, r1
 8003556:	673a      	str	r2, [r7, #112]	; 0x70
 8003558:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800355a:	4413      	add	r3, r2
 800355c:	677b      	str	r3, [r7, #116]	; 0x74
 800355e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003562:	2200      	movs	r2, #0
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
 8003566:	637a      	str	r2, [r7, #52]	; 0x34
 8003568:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800356c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003570:	f7fd fa68 	bl	8000a44 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800357e:	e05b      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003580:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	2200      	movs	r2, #0
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
 800358a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
 8003598:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	f04f 0000 	mov.w	r0, #0
 80035a4:	f04f 0100 	mov.w	r1, #0
 80035a8:	0159      	lsls	r1, r3, #5
 80035aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ae:	0150      	lsls	r0, r2, #5
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4641      	mov	r1, r8
 80035b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ba:	4649      	mov	r1, r9
 80035bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035d4:	ebb2 040a 	subs.w	r4, r2, sl
 80035d8:	eb63 050b 	sbc.w	r5, r3, fp
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	00eb      	lsls	r3, r5, #3
 80035e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ea:	00e2      	lsls	r2, r4, #3
 80035ec:	4614      	mov	r4, r2
 80035ee:	461d      	mov	r5, r3
 80035f0:	4643      	mov	r3, r8
 80035f2:	18e3      	adds	r3, r4, r3
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	464b      	mov	r3, r9
 80035f8:	eb45 0303 	adc.w	r3, r5, r3
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360a:	4629      	mov	r1, r5
 800360c:	028b      	lsls	r3, r1, #10
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003614:	4621      	mov	r1, r4
 8003616:	028a      	lsls	r2, r1, #10
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003620:	2200      	movs	r2, #0
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	61fa      	str	r2, [r7, #28]
 8003626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362a:	f7fd fa0b 	bl	8000a44 <__aeabi_uldivmod>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4613      	mov	r3, r2
 8003634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003638:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <HAL_RCC_GetSysClockFreq+0x348>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0f1b      	lsrs	r3, r3, #28
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800364a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003656:	e003      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_GetSysClockFreq+0x34c>)
 800365a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800365e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003664:	4618      	mov	r0, r3
 8003666:	3798      	adds	r7, #152	; 0x98
 8003668:	46bd      	mov	sp, r7
 800366a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	00f42400 	.word	0x00f42400
 8003678:	017d7840 	.word	0x017d7840

0800367c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e28d      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8083 	beq.w	80037a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800369c:	4b94      	ldr	r3, [pc, #592]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d019      	beq.n	80036dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036a8:	4b91      	ldr	r3, [pc, #580]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036b4:	4b8e      	ldr	r3, [pc, #568]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c0:	d00c      	beq.n	80036dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c2:	4b8b      	ldr	r3, [pc, #556]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d112      	bne.n	80036f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036da:	d10b      	bne.n	80036f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	4b84      	ldr	r3, [pc, #528]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d05b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x124>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d157      	bne.n	80037a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e25a      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fc:	d106      	bne.n	800370c <HAL_RCC_OscConfig+0x90>
 80036fe:	4b7c      	ldr	r3, [pc, #496]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7b      	ldr	r2, [pc, #492]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e01d      	b.n	8003748 <HAL_RCC_OscConfig+0xcc>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0xb4>
 8003716:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a75      	ldr	r2, [pc, #468]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a72      	ldr	r2, [pc, #456]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0xcc>
 8003730:	4b6f      	ldr	r3, [pc, #444]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a6e      	ldr	r2, [pc, #440]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a6b      	ldr	r2, [pc, #428]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe fa4a 	bl	8001be8 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe fa46 	bl	8001be8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e21f      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0xdc>
 8003776:	e014      	b.n	80037a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe fa36 	bl	8001be8 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe fa32 	bl	8001be8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e20b      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	4b57      	ldr	r3, [pc, #348]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x104>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d06f      	beq.n	800388e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ae:	4b50      	ldr	r3, [pc, #320]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d017      	beq.n	80037ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ba:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d105      	bne.n	80037d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037c6:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d11c      	bne.n	8003818 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037de:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d116      	bne.n	8003818 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x186>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e1d3      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003802:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4937      	ldr	r1, [pc, #220]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	e03a      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003820:	4b34      	ldr	r3, [pc, #208]	; (80038f4 <HAL_RCC_OscConfig+0x278>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fe f9df 	bl	8001be8 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382e:	f7fe f9db 	bl	8001be8 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1b4      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4925      	ldr	r1, [pc, #148]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 800385c:	4313      	orrs	r3, r2
 800385e:	600b      	str	r3, [r1, #0]
 8003860:	e015      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_OscConfig+0x278>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fe f9be 	bl	8001be8 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003870:	f7fe f9ba 	bl	8001be8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e193      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d036      	beq.n	8003908 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fe f99e 	bl	8001be8 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b0:	f7fe f99a 	bl	8001be8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e173      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_OscConfig+0x274>)
 80038c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x234>
 80038ce:	e01b      	b.n	8003908 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fe f987 	bl	8001be8 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	e00e      	b.n	80038fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038de:	f7fe f983 	bl	8001be8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d907      	bls.n	80038fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e15c      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
 80038f0:	40023800 	.word	0x40023800
 80038f4:	42470000 	.word	0x42470000
 80038f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	4b8a      	ldr	r3, [pc, #552]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80038fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ea      	bne.n	80038de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8097 	beq.w	8003a44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391a:	4b83      	ldr	r3, [pc, #524]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10f      	bne.n	8003946 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	4a7e      	ldr	r2, [pc, #504]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003934:	6413      	str	r3, [r2, #64]	; 0x40
 8003936:	4b7c      	ldr	r3, [pc, #496]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003942:	2301      	movs	r3, #1
 8003944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	4b79      	ldr	r3, [pc, #484]	; (8003b2c <HAL_RCC_OscConfig+0x4b0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d118      	bne.n	8003984 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003952:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <HAL_RCC_OscConfig+0x4b0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a75      	ldr	r2, [pc, #468]	; (8003b2c <HAL_RCC_OscConfig+0x4b0>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395e:	f7fe f943 	bl	8001be8 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7fe f93f 	bl	8001be8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e118      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_RCC_OscConfig+0x4b0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x31e>
 800398c:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a65      	ldr	r2, [pc, #404]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	e01c      	b.n	80039d4 <HAL_RCC_OscConfig+0x358>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0x340>
 80039a2:	4b61      	ldr	r3, [pc, #388]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a60      	ldr	r2, [pc, #384]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
 80039ae:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	4a5d      	ldr	r2, [pc, #372]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ba:	e00b      	b.n	80039d4 <HAL_RCC_OscConfig+0x358>
 80039bc:	4b5a      	ldr	r3, [pc, #360]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a59      	ldr	r2, [pc, #356]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a56      	ldr	r2, [pc, #344]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80039ce:	f023 0304 	bic.w	r3, r3, #4
 80039d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe f904 	bl	8001be8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fe f900 	bl	8001be8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e0d7      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ee      	beq.n	80039e4 <HAL_RCC_OscConfig+0x368>
 8003a06:	e014      	b.n	8003a32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fe f8ee 	bl	8001be8 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a10:	f7fe f8ea 	bl	8001be8 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0c1      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a26:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ee      	bne.n	8003a10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	4a3a      	ldr	r2, [pc, #232]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80ad 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a4e:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d060      	beq.n	8003b1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d145      	bne.n	8003aee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b33      	ldr	r3, [pc, #204]	; (8003b30 <HAL_RCC_OscConfig+0x4b4>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe f8be 	bl	8001be8 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe f8ba 	bl	8001be8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e093      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	019b      	lsls	r3, r3, #6
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	085b      	lsrs	r3, r3, #1
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	071b      	lsls	r3, r3, #28
 8003aba:	491b      	ldr	r1, [pc, #108]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <HAL_RCC_OscConfig+0x4b4>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fe f88f 	bl	8001be8 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ace:	f7fe f88b 	bl	8001be8 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e064      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x452>
 8003aec:	e05c      	b.n	8003ba8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_RCC_OscConfig+0x4b4>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fe f878 	bl	8001be8 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe f874 	bl	8001be8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e04d      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCC_OscConfig+0x4ac>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x480>
 8003b1a:	e045      	b.n	8003ba8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e040      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40007000 	.word	0x40007000
 8003b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b34:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <HAL_RCC_OscConfig+0x538>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d030      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d129      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d122      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d119      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d10f      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800

08003bb8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e066      	b.n	8003c9c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7f5b      	ldrb	r3, [r3, #29]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fe74 	bl	80018cc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	22ca      	movs	r2, #202	; 0xca
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2253      	movs	r2, #83	; 0x53
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f87a 	bl	8003cf4 <RTC_EnterInitMode>
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d12c      	bne.n	8003c64 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68d2      	ldr	r2, [r2, #12]
 8003c44:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6919      	ldr	r1, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	041a      	lsls	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f881 	bl	8003d62 <RTC_ExitInitMode>
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d113      	bne.n	8003c92 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	22ff      	movs	r2, #255	; 0xff
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cc0:	f7fd ff92 	bl	8001be8 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003cc6:	e009      	b.n	8003cdc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cc8:	f7fd ff8e 	bl	8001be8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cd6:	d901      	bls.n	8003cdc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e007      	b.n	8003cec <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0ee      	beq.n	8003cc8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d122      	bne.n	8003d58 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d22:	f7fd ff61 	bl	8001be8 <HAL_GetTick>
 8003d26:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d28:	e00c      	b.n	8003d44 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d2a:	f7fd ff5d 	bl	8001be8 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d38:	d904      	bls.n	8003d44 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <RTC_EnterInitMode+0x64>
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d1e8      	bne.n	8003d2a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d7c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff89 	bl	8003ca4 <HAL_RTC_WaitForSynchro>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e041      	b.n	8003e42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd fda4 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f000 fa10 	bl	8004210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e041      	b.n	8003ee0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f839 	bl	8003ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f000 f9c1 	bl	8004210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e0ae      	b.n	8004078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b0c      	cmp	r3, #12
 8003f26:	f200 809f 	bhi.w	8004068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f65 	.word	0x08003f65
 8003f34:	08004069 	.word	0x08004069
 8003f38:	08004069 	.word	0x08004069
 8003f3c:	08004069 	.word	0x08004069
 8003f40:	08003fa5 	.word	0x08003fa5
 8003f44:	08004069 	.word	0x08004069
 8003f48:	08004069 	.word	0x08004069
 8003f4c:	08004069 	.word	0x08004069
 8003f50:	08003fe7 	.word	0x08003fe7
 8003f54:	08004069 	.word	0x08004069
 8003f58:	08004069 	.word	0x08004069
 8003f5c:	08004069 	.word	0x08004069
 8003f60:	08004027 	.word	0x08004027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f9f0 	bl	8004350 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0208 	orr.w	r2, r2, #8
 8003f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6999      	ldr	r1, [r3, #24]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	619a      	str	r2, [r3, #24]
      break;
 8003fa2:	e064      	b.n	800406e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fa40 	bl	8004430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6999      	ldr	r1, [r3, #24]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	021a      	lsls	r2, r3, #8
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	619a      	str	r2, [r3, #24]
      break;
 8003fe4:	e043      	b.n	800406e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fa95 	bl	800451c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0208 	orr.w	r2, r2, #8
 8004000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0204 	bic.w	r2, r2, #4
 8004010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69d9      	ldr	r1, [r3, #28]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	61da      	str	r2, [r3, #28]
      break;
 8004024:	e023      	b.n	800406e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fae9 	bl	8004604 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69d9      	ldr	r1, [r3, #28]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	021a      	lsls	r2, r3, #8
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	61da      	str	r2, [r3, #28]
      break;
 8004066:	e002      	b.n	800406e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	75fb      	strb	r3, [r7, #23]
      break;
 800406c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004076:	7dfb      	ldrb	r3, [r7, #23]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIM_ConfigClockSource+0x1c>
 8004098:	2302      	movs	r3, #2
 800409a:	e0b4      	b.n	8004206 <HAL_TIM_ConfigClockSource+0x186>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d4:	d03e      	beq.n	8004154 <HAL_TIM_ConfigClockSource+0xd4>
 80040d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040da:	f200 8087 	bhi.w	80041ec <HAL_TIM_ConfigClockSource+0x16c>
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	f000 8086 	beq.w	80041f2 <HAL_TIM_ConfigClockSource+0x172>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	d87f      	bhi.n	80041ec <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b70      	cmp	r3, #112	; 0x70
 80040ee:	d01a      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0xa6>
 80040f0:	2b70      	cmp	r3, #112	; 0x70
 80040f2:	d87b      	bhi.n	80041ec <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b60      	cmp	r3, #96	; 0x60
 80040f6:	d050      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x11a>
 80040f8:	2b60      	cmp	r3, #96	; 0x60
 80040fa:	d877      	bhi.n	80041ec <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b50      	cmp	r3, #80	; 0x50
 80040fe:	d03c      	beq.n	800417a <HAL_TIM_ConfigClockSource+0xfa>
 8004100:	2b50      	cmp	r3, #80	; 0x50
 8004102:	d873      	bhi.n	80041ec <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d058      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x13a>
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d86f      	bhi.n	80041ec <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b30      	cmp	r3, #48	; 0x30
 800410e:	d064      	beq.n	80041da <HAL_TIM_ConfigClockSource+0x15a>
 8004110:	2b30      	cmp	r3, #48	; 0x30
 8004112:	d86b      	bhi.n	80041ec <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b20      	cmp	r3, #32
 8004116:	d060      	beq.n	80041da <HAL_TIM_ConfigClockSource+0x15a>
 8004118:	2b20      	cmp	r3, #32
 800411a:	d867      	bhi.n	80041ec <HAL_TIM_ConfigClockSource+0x16c>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05c      	beq.n	80041da <HAL_TIM_ConfigClockSource+0x15a>
 8004120:	2b10      	cmp	r3, #16
 8004122:	d05a      	beq.n	80041da <HAL_TIM_ConfigClockSource+0x15a>
 8004124:	e062      	b.n	80041ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6899      	ldr	r1, [r3, #8]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f000 fb35 	bl	80047a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	609a      	str	r2, [r3, #8]
      break;
 8004152:	e04f      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	6899      	ldr	r1, [r3, #8]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f000 fb1e 	bl	80047a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004176:	609a      	str	r2, [r3, #8]
      break;
 8004178:	e03c      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	461a      	mov	r2, r3
 8004188:	f000 fa92 	bl	80046b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2150      	movs	r1, #80	; 0x50
 8004192:	4618      	mov	r0, r3
 8004194:	f000 faeb 	bl	800476e <TIM_ITRx_SetConfig>
      break;
 8004198:	e02c      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	461a      	mov	r2, r3
 80041a8:	f000 fab1 	bl	800470e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2160      	movs	r1, #96	; 0x60
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fadb 	bl	800476e <TIM_ITRx_SetConfig>
      break;
 80041b8:	e01c      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f000 fa72 	bl	80046b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2140      	movs	r1, #64	; 0x40
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 facb 	bl	800476e <TIM_ITRx_SetConfig>
      break;
 80041d8:	e00c      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f000 fac2 	bl	800476e <TIM_ITRx_SetConfig>
      break;
 80041ea:	e003      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      break;
 80041f0:	e000      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a40      	ldr	r2, [pc, #256]	; (8004324 <TIM_Base_SetConfig+0x114>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d013      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422e:	d00f      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a3d      	ldr	r2, [pc, #244]	; (8004328 <TIM_Base_SetConfig+0x118>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00b      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3c      	ldr	r2, [pc, #240]	; (800432c <TIM_Base_SetConfig+0x11c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3b      	ldr	r2, [pc, #236]	; (8004330 <TIM_Base_SetConfig+0x120>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3a      	ldr	r2, [pc, #232]	; (8004334 <TIM_Base_SetConfig+0x124>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d108      	bne.n	8004262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2f      	ldr	r2, [pc, #188]	; (8004324 <TIM_Base_SetConfig+0x114>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d02b      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d027      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <TIM_Base_SetConfig+0x118>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d023      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2b      	ldr	r2, [pc, #172]	; (800432c <TIM_Base_SetConfig+0x11c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01f      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2a      	ldr	r2, [pc, #168]	; (8004330 <TIM_Base_SetConfig+0x120>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01b      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a29      	ldr	r2, [pc, #164]	; (8004334 <TIM_Base_SetConfig+0x124>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d017      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a28      	ldr	r2, [pc, #160]	; (8004338 <TIM_Base_SetConfig+0x128>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a27      	ldr	r2, [pc, #156]	; (800433c <TIM_Base_SetConfig+0x12c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00f      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a26      	ldr	r2, [pc, #152]	; (8004340 <TIM_Base_SetConfig+0x130>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a25      	ldr	r2, [pc, #148]	; (8004344 <TIM_Base_SetConfig+0x134>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d007      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <TIM_Base_SetConfig+0x138>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a23      	ldr	r2, [pc, #140]	; (800434c <TIM_Base_SetConfig+0x13c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d108      	bne.n	80042d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <TIM_Base_SetConfig+0x114>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_Base_SetConfig+0xf8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <TIM_Base_SetConfig+0x124>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d103      	bne.n	8004310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	615a      	str	r2, [r3, #20]
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40010400 	.word	0x40010400
 8004338:	40014000 	.word	0x40014000
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800
 8004344:	40001800 	.word	0x40001800
 8004348:	40001c00 	.word	0x40001c00
 800434c:	40002000 	.word	0x40002000

08004350 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f023 0201 	bic.w	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f023 0302 	bic.w	r3, r3, #2
 8004398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a20      	ldr	r2, [pc, #128]	; (8004428 <TIM_OC1_SetConfig+0xd8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_OC1_SetConfig+0x64>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a1f      	ldr	r2, [pc, #124]	; (800442c <TIM_OC1_SetConfig+0xdc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10c      	bne.n	80043ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0308 	bic.w	r3, r3, #8
 80043ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f023 0304 	bic.w	r3, r3, #4
 80043cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a15      	ldr	r2, [pc, #84]	; (8004428 <TIM_OC1_SetConfig+0xd8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_OC1_SetConfig+0x8e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <TIM_OC1_SetConfig+0xdc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d111      	bne.n	8004402 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	621a      	str	r2, [r3, #32]
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40010000 	.word	0x40010000
 800442c:	40010400 	.word	0x40010400

08004430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f023 0210 	bic.w	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0320 	bic.w	r3, r3, #32
 800447a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a22      	ldr	r2, [pc, #136]	; (8004514 <TIM_OC2_SetConfig+0xe4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_OC2_SetConfig+0x68>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a21      	ldr	r2, [pc, #132]	; (8004518 <TIM_OC2_SetConfig+0xe8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10d      	bne.n	80044b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <TIM_OC2_SetConfig+0xe4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC2_SetConfig+0x94>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a16      	ldr	r2, [pc, #88]	; (8004518 <TIM_OC2_SetConfig+0xe8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d113      	bne.n	80044ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40010000 	.word	0x40010000
 8004518:	40010400 	.word	0x40010400

0800451c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a21      	ldr	r2, [pc, #132]	; (80045fc <TIM_OC3_SetConfig+0xe0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_OC3_SetConfig+0x66>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a20      	ldr	r2, [pc, #128]	; (8004600 <TIM_OC3_SetConfig+0xe4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d10d      	bne.n	800459e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800459c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a16      	ldr	r2, [pc, #88]	; (80045fc <TIM_OC3_SetConfig+0xe0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_OC3_SetConfig+0x92>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <TIM_OC3_SetConfig+0xe4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d113      	bne.n	80045d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	621a      	str	r2, [r3, #32]
}
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40010000 	.word	0x40010000
 8004600:	40010400 	.word	0x40010400

08004604 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800464e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	031b      	lsls	r3, r3, #12
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <TIM_OC4_SetConfig+0xa4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_OC4_SetConfig+0x68>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <TIM_OC4_SetConfig+0xa8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d109      	bne.n	8004680 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40010400 	.word	0x40010400

080046b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 0201 	bic.w	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f023 030a 	bic.w	r3, r3, #10
 80046ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	621a      	str	r2, [r3, #32]
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800470e:	b480      	push	{r7}
 8004710:	b087      	sub	sp, #28
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0210 	bic.w	r2, r3, #16
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	031b      	lsls	r3, r3, #12
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800474a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	f043 0307 	orr.w	r3, r3, #7
 8004790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	021a      	lsls	r2, r3, #8
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e05a      	b.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a21      	ldr	r2, [pc, #132]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d01d      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1b      	ldr	r2, [pc, #108]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1a      	ldr	r2, [pc, #104]	; (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a15      	ldr	r2, [pc, #84]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10c      	bne.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800488c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	4313      	orrs	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40001800 	.word	0x40001800

080048dc <memset>:
 80048dc:	4402      	add	r2, r0
 80048de:	4603      	mov	r3, r0
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d100      	bne.n	80048e6 <memset+0xa>
 80048e4:	4770      	bx	lr
 80048e6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ea:	e7f9      	b.n	80048e0 <memset+0x4>

080048ec <__libc_init_array>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	4d0d      	ldr	r5, [pc, #52]	; (8004924 <__libc_init_array+0x38>)
 80048f0:	4c0d      	ldr	r4, [pc, #52]	; (8004928 <__libc_init_array+0x3c>)
 80048f2:	1b64      	subs	r4, r4, r5
 80048f4:	10a4      	asrs	r4, r4, #2
 80048f6:	2600      	movs	r6, #0
 80048f8:	42a6      	cmp	r6, r4
 80048fa:	d109      	bne.n	8004910 <__libc_init_array+0x24>
 80048fc:	4d0b      	ldr	r5, [pc, #44]	; (800492c <__libc_init_array+0x40>)
 80048fe:	4c0c      	ldr	r4, [pc, #48]	; (8004930 <__libc_init_array+0x44>)
 8004900:	f000 f818 	bl	8004934 <_init>
 8004904:	1b64      	subs	r4, r4, r5
 8004906:	10a4      	asrs	r4, r4, #2
 8004908:	2600      	movs	r6, #0
 800490a:	42a6      	cmp	r6, r4
 800490c:	d105      	bne.n	800491a <__libc_init_array+0x2e>
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	f855 3b04 	ldr.w	r3, [r5], #4
 8004914:	4798      	blx	r3
 8004916:	3601      	adds	r6, #1
 8004918:	e7ee      	b.n	80048f8 <__libc_init_array+0xc>
 800491a:	f855 3b04 	ldr.w	r3, [r5], #4
 800491e:	4798      	blx	r3
 8004920:	3601      	adds	r6, #1
 8004922:	e7f2      	b.n	800490a <__libc_init_array+0x1e>
 8004924:	08004964 	.word	0x08004964
 8004928:	08004964 	.word	0x08004964
 800492c:	08004964 	.word	0x08004964
 8004930:	08004968 	.word	0x08004968

08004934 <_init>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr

08004940 <_fini>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	bf00      	nop
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr
